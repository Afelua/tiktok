{"version":3,"sources":["public/movie.svg","public/logo.svg","public/person.svg","constants.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","config","headers","Accept","api","axios","create","baseURL","sendRequest","files","onSuccess","onFail","post","then","response","data","catch","error","App","state","video","isLoading","setVideo","setState","onDrop","file","FormData","map","item","append","this","width","height","controls","src","type","text","className","size","color","loading","movieItem","alt","logo","acceptedFiles","multiple","getRootProps","getInputProps","renderText","personItem","renderVideo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,2ECA3CD,EAAOC,QAAU,IAA0B,oC,yJCE9BC,EAAM,iCAEbC,EAAS,CACXC,QAAS,CACLC,OAAQ,mBACR,eAAgB,uEAIlBC,E,OAAMC,EAAMC,OAAO,CACrBC,QAASP,EAAM,QAINQ,EAAc,SAACC,EAAOC,EAAWC,GAAnB,OAA8BP,EAAIQ,KAAK,IAAKH,EAAOR,GACzEY,MAAK,SAAUC,GACZ,OAAOJ,EAAUI,EAASC,SAE7BC,OAAM,SAAUC,GAEb,OAAON,EAAOM,O,0EC6EPC,G,iNAtFXC,MAAQ,CACJC,OAAO,EACPC,WAAW,EACXJ,OAAO,G,EAGXK,SAAW,SAACF,GAAD,OAAW,EAAKG,SAAS,CAChCH,QACAC,WAAW,K,EAGfG,OAAS,SAACf,GACN,EAAKc,SAAS,CAAEF,WAAW,IAC3B,IAAMI,EAAO,IAAIC,SAEjB,OADAjB,EAAMkB,KAAI,SAACC,GAAD,OAAUH,EAAKI,OAAO,OAAQD,MACjCpB,EAAYiB,EAAM,EAAKH,UAAU,SAACL,GAAD,OAAW,EAAKM,SAASN,O,6EAGvD,IAAD,EACoBa,KAAKX,MAA1BC,EADC,EACDA,MAAOC,EADN,EACMA,UACf,OAAID,EAEQ,oCACI,2BAAOW,MAAM,MAAMC,OAAO,MAAMC,UAAQ,GACpC,4BAAQC,IAAKlC,EAAMoB,EAAOe,KAAK,eAEnC,kBAAC,kBAAD,CAAiBC,KAAMpC,EAAMoB,GACzB,0BAAMiB,UAAU,QAAhB,6GAMhB,oCACKhB,EACG,0BAAMgB,UAAU,UACZ,kBAAC,aAAD,CACIC,KAAM,GACNC,MAAM,UACNC,SAAS,KAEP,yBAAKN,IAAKO,IAAWJ,UAAU,QAAQK,IAAI,KACzD,0BAAML,UAAU,QAAhB,mE,mCAOR,OADgBP,KAAKX,MAAdF,MAEI,4JAEJ,qN,+BAED,IAAD,SACsBa,KAAKX,MAAzBE,EADF,EACEA,UAAWJ,EADb,EACaA,MAClB,OAAQ,yBAAKoB,UAAU,OACnB,yBAAKA,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,aACX,yBAAKH,IAAKS,IAAMZ,MAAM,QAAQW,IAAI,KAClC,kBAAC,IAAD,CAAUlB,OAAQ,SAAAoB,GAAa,OAAI,EAAKpB,OAAOoB,IAAgBC,UAAQ,IAClE,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,cAAhB,OACO,yCAASD,IAAT,CAAyBT,UAAU,eAC/B,yBAAKA,UAAU,yBACVhB,GAAaJ,EAAQ,EAAK+B,aAAe,oCACtC,yBAAKd,IAAKe,IAAYZ,UAAU,cAAcK,IAAI,KAClD,yBAAKR,IAAKe,IAAYZ,UAAU,cAAcK,IAAI,OAI1D,0BAAWK,KACX,0BAAMV,UAAU,QAAhB,8HAKpB,yBAAKA,UAAU,6BACVP,KAAKoB,sB,GAhFZC,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAC,GACLkD,QAAQlD,MAAMA,EAAMmD,c","file":"static/js/main.db86c991.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie.0e9ce8b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.4c53e1ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/person.64ebc11e.svg\";","import axios from \"axios\";\n\nexport const url = 'http://192.168.108.26:8080gfdg';\n\nconst config = {\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'multipart/form-data; boundary=---WebKitFormBoundary7MA4YWxkTrZu0gW',\n    },\n};\n\nconst api = axios.create({\n    baseURL: url + '/f1'\n});\n\n\nexport const sendRequest = (files, onSuccess, onFail) => api.post('/', files, config)\n    .then(function (response) {\n        return onSuccess(response.data);\n    })\n    .catch(function (error) {\n        // handle error\n        return onFail(error)\n    });\n","import React from 'react';\nimport {sendRequest, url} from './constants';\nimport Dropzone from 'react-dropzone'\nimport personItem from './public/person.svg';\nimport movieItem from './public/movie.svg';\nimport logo from './public/logo.svg';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { ClipLoader } from \"react-spinners\";\n\nimport './App.css';\n\nclass App extends React.Component {\n\n    state = {\n        video: false,\n        isLoading: false,\n        error: false\n    };\n\n    setVideo = (video) => this.setState({\n        video,\n        isLoading: false\n    });\n\n    onDrop = (files) => {\n        this.setState({ isLoading: true });\n        const file = new FormData();\n        files.map((item) => file.append('name', item));\n        return sendRequest(file, this.setVideo, (error) => this.setState(error));\n    };\n\n    renderVideo(){\n        const { video, isLoading } = this.state;\n        if (video) {\n                return (\n                    <>\n                        <video width=\"280\" height=\"500\" controls>\n                            <source src={url + video} type=\"video/mp4\"/>\n                        </video>\n                        <CopyToClipboard text={url + video}>\n                            <span className=\"text\">Скопировать ссылку</span>\n                        </CopyToClipboard>\n                    </>\n                )\n        }\n        return (\n            <>\n                {isLoading ?\n                    <span className=\"loader\">\n                        <ClipLoader\n                            size={80}\n                            color=\"#5C75E6\"\n                            loading={true}\n                        />\n                    </span> : <img src={movieItem} className=\"image\" alt=\"\"/>}\n                <span className=\"text\">Поделиться</span>\n            </>\n        )\n    }\n\n    renderText(){\n        const {error} = this.state;\n        if (error) {\n            return 'Извините, попробуйте позднее';\n        }\n        return 'Фотографии успешно загружены, ожидайте';\n    }\n    render() {\n        const {isLoading, error} = this.state;\n        return (<div className=\"app\">\n            <div className=\"main\">\n                <div className=\"mainContainer\">\n                    <div className=\"container\">\n                        <img src={logo} width=\"117px\" alt=\"\"/>\n                        <Dropzone onDrop={acceptedFiles => this.onDrop(acceptedFiles)} multiple>\n                            {({getRootProps, getInputProps}) => (\n                                    <div {...getRootProps()} className=\"two-photos\">\n                                        <div className=\"two-photos__container\">\n                                            {isLoading || error ? this.renderText() : <>\n                                                <img src={personItem} className=\"image-small\" alt=\"\"/>\n                                                <img src={personItem} className=\"image-small\" alt=\"\"/>\n                                            </>}\n\n                                        </div>\n                                        <input {...getInputProps()} />\n                                        <span className=\"text\">Загрузить 2 фотографии</span>\n                                    </div>\n                            )}\n                        </Dropzone>\n                    </div>\n                    <div className=\"container container_video\">\n                        {this.renderVideo()}\n                    </div>\n                </div>\n            </div>\n        </div>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}